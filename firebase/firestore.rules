rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function isAdmin() { return isSignedIn() && request.auth.token.admin == true; }
    function isOwner(uid) { return isSignedIn() && request.auth.uid == uid; }
    function isSiteStaff() { return isSignedIn() && (request.auth.token.admin == true || request.auth.token.siteRole in ['superadmin', 'staff']); }
    function isIn(arr, val) { return arr != null && val in arr; }

    // User profiles: users/{uid}
    match /users/{uid} {
      // Create only your own profile, with limited fields
      allow create: if isOwner(uid) &&
        request.resource.data.keys().hasOnly(['email', 'displayName', 'photoURL', 'createdAt', 'updatedAt', 'plan', 'subscriptionActive']);

      // Read your own profile, or admins can read any
      allow read: if isOwner(uid) || isAdmin();

      // Update only specific fields on your own profile; admins can update anything
      allow update: if (isOwner(uid) &&
        request.resource.data.diff(resource.data).changedKeys().hasOnly(['email', 'displayName', 'photoURL', 'updatedAt'])) || isAdmin();

      // Delete restricted to admins
      allow delete: if isAdmin();
    }

    // Subscriptions are written by server (Admin SDK). Allow users to read their own status.
    match /subscriptions/{docId} {
      allow read: if isAdmin() || (isSignedIn() && docId == request.auth.uid);
      // Client writes not allowed; Admin SDK bypasses these rules on the server.
      allow create, update, delete: if isAdmin();
    }

    // Organizations and RBAC
    match /orgs/{orgId} {
      allow read: if isSignedIn() && (
        isIn(resource.data.adminUids, request.auth.uid) ||
        isIn(resource.data.editorUids, request.auth.uid) ||
        isIn(resource.data.clientUids, request.auth.uid) ||
        isSiteStaff()
      );

      // Create org: any signed-in user can create and become admin on that org
      allow create: if isSignedIn() &&
        request.resource.data.adminUids is list &&
        request.auth.uid in request.resource.data.adminUids;

      // Update/delete org: only org admins or site staff
      allow update, delete: if isSignedIn() && (
        isIn(resource.data.adminUids, request.auth.uid) || isSiteStaff()
      );

      // Members (optional future: if you later add subcollection)
      match /members/{memberUid} {
        allow read: if isSignedIn() && (request.auth.uid == memberUid || isIn(get(/databases/$(database)/documents/orgs/$(orgId)).data.adminUids, request.auth.uid) || isSiteStaff());
        allow write: if isSignedIn() && (isIn(get(/databases/$(database)/documents/orgs/$(orgId)).data.adminUids, request.auth.uid) || isSiteStaff());
      }

      // Projects
      match /projects/{projectId} {
        allow read: if isSignedIn() && (
          isIn(get(/databases/$(database)/documents/orgs/$(orgId)).data.adminUids, request.auth.uid) ||
          isIn(get(/databases/$(database)/documents/orgs/$(orgId)).data.editorUids, request.auth.uid) ||
          isIn(resource.data.assignedClientUids, request.auth.uid) ||
          isSiteStaff()
        );
        allow create, update, delete: if isSignedIn() && (
          isIn(get(/databases/$(database)/documents/orgs/$(orgId)).data.adminUids, request.auth.uid) ||
          isIn(get(/databases/$(database)/documents/orgs/$(orgId)).data.editorUids, request.auth.uid) ||
          isSiteStaff()
        );
      }

      // Deliverables
      match /deliverables/{deliverableId} {
        allow read: if isSignedIn() && (
          isIn(get(/databases/$(database)/documents/orgs/$(orgId)).data.adminUids, request.auth.uid) ||
          isIn(get(/databases/$(database)/documents/orgs/$(orgId)).data.editorUids, request.auth.uid) ||
          isIn(resource.data.assignedClientUids, request.auth.uid) ||
          isSiteStaff()
        );
        allow create, update, delete: if isSignedIn() && (
          isIn(get(/databases/$(database)/documents/orgs/$(orgId)).data.adminUids, request.auth.uid) ||
          isIn(get(/databases/$(database)/documents/orgs/$(orgId)).data.editorUids, request.auth.uid) ||
          isSiteStaff()
        );
      }
    }

    // Deny everything else by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
